##########################################################################
# DEPLOYMENT FROM GITHUB DOCKER to AWS - ECR
# * Automatic Deployment trigger pipeline
# Tinitiate.com (c)
##########################################################################
# This is a basic workflow to help you get started with Actions

# Specify the Name of the Workflow
name: Deploy to ECR


# Controls when the workflow will run
on:
 # Triggers the workflow on push event but only for the "main" branch
  push:
    branches: [ main ]
 # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:
    
    name: Build Image
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
     
    - name: Check out code
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
       # Configures the AWS CLI.
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      # Logins into the Amazon ECR 
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: syntaxboard_django_3_image_latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Login out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
